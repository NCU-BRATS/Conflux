div
  div#editable_title

    h1
      = title "##{issue.sequential_id} #{issue.title}"
      .ui.buttons.basic.right.floated
        - if issue.open? && policy(issue).close?
          a.ui.button.basic.red href="#{close_project_issue_path(issue.project, issue)}" data-remote=true data-method='put'
            i.icon.lock
            = t('action.target.close', target: Issue.model_name.human)
        - elsif issue.closed? && policy(issue).reopen?
          a.ui.button.basic.blue href="#{reopen_project_issue_path(issue.project, issue)}" data-remote=true data-method='put'
            i.icon.unlock
            = t('action.target.open', target: Issue.model_name.human)
        - if policy(issue).update?
          a.ui.button.basic.red data-editable='title'
            i.icon.edit
            = t('action.word.edit')
        a.ui.button.basic.teal href="#{project_issues_path(issue.project)}"
          i.icon.chevron.left
          = t('action.word.back')

    div
      - if issue.open?
        .ui.label.large
          i.icon.green.unlock
          = issue.aasm.human_state
      - if issue.closed?
        .ui.label.large
          i.icon.red.lock
          = issue.aasm.human_state
      span
        => user_tag issue.user, class: 'bold black link'
        = t('action.target.created_at', target: '')
        = time_format_relative_tag issue.created_at

      - if issue.sprint.present?
        = "。#{Sprint.model_name.human}-" + issue.sprint.title

      - if issue.assignee.present?
        = "。#{Issue.human_attribute_name(:assignee)}-"
        = user_tag issue.assignee, class: 'bold black link'

      - if issue.planed?
        = '。'
        - if issue.working?
          => time_format_relative_tag issue.due_at
          = t('state.end')
        - elsif issue.expired?
          => time_format_relative_tag issue.due_at
          = t('state.expired')
        - elsif issue.finished?
          => time_format_relative_tag issue.due_at
          = t('state.finish')
        - else
          => time_format_relative_tag issue.begin_at
          = t('state.start')
      span#issues_index_label
        - issue.labels.each do |label|
          = render_colored_label label

  - if policy(issue).update?
    #editable_title_form
      .ui.segment
        = simple_form_for [issue.project, issue], remote: true do |f|
          .ui.buttons.right.floated
            button.ui.button.basic.green
              i.icon.checkmark
              = t('helpers.submit.update', model: Issue.model_name.human)
            a#editable_title_cancel.ui.button.basic.teal
              i.icon.chevron.left
              = t('action.word.cancel')
          = f.input :title
          .two.fields
            = f.input :begin_at
            = f.input :due_at
          .two.fields
            = f.association :assignee, collection: [issue.assignee],
                            input_html: { data: { :'resource-path' => project_members_path( issue.project ),
                                                  :'search-field' => '["name", "email"]',
                                                  :'option-tpl' => 'option-user'} }
            = f.association :sprint, collection: [issue.sprint],
                            input_html: { data: { :'resource-path' => project_sprints_path(issue.project),
                                                  :'search-field' => '["title"]',
                                                  :'add-new'      => true } }
          .field
            = f.association :labels, collection: issue.labels,
                            input_html: { data: { :'resource-path' => project_labels_path( issue.project ),
                                                  :'search-field' => '["title"]',
                                                  :'option-tpl' => 'option-label',
                                                  :'item-tpl' => 'item-label',
                                                  :'add-new' => true} }
  .ui.divider
